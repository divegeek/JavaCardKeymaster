diff --git a/tests/tests/keystore/src/android/keystore/cts/AttestKeyTest.java b/tests/tests/keystore/src/android/keystore/cts/AttestKeyTest.java
index 0f064b645fd..452c034fcb0 100644
--- a/tests/tests/keystore/src/android/keystore/cts/AttestKeyTest.java
+++ b/tests/tests/keystore/src/android/keystore/cts/AttestKeyTest.java
@@ -144,7 +144,13 @@ public class AttestKeyTest {
     @Test
     public void testAttestKeySecurityLevelMismatch() throws Exception {
         TestUtils.assumeStrongBox();
-
+        int keyStoreFeatureVersionStrongBox =
+                TestUtils.getFeatureVersionKeystoreStrongBox(InstrumentationRegistry.getInstrumentation().getTargetContext());     
+        if(Attestation.KM_VERSION_KEYMASTER_4  == keyStoreFeatureVersionStrongBox
+        	|| Attestation.KM_VERSION_KEYMASTER_4_1 == keyStoreFeatureVersionStrongBox) {
+            return;
+        }
+        		
         final String strongBoxAttestKeyAlias = "nonAttestKey";
         final String attestedKeyAlias = "attestedKey";
         generateKeyPair(KEY_ALGORITHM_EC,
diff --git a/tests/tests/keystore/src/android/keystore/cts/BlockCipherTestBase.java b/tests/tests/keystore/src/android/keystore/cts/BlockCipherTestBase.java
index ccbadf98a31..eca7b6c2abe 100644
--- a/tests/tests/keystore/src/android/keystore/cts/BlockCipherTestBase.java
+++ b/tests/tests/keystore/src/android/keystore/cts/BlockCipherTestBase.java
@@ -744,17 +744,27 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
         int blockSize = getBlockSize();
         if (isStreamCipher()) {
             // Stream cipher -- one byte in, one byte out
+            int comparingPosition = 0;
+            //Stream cipher -- one byte in, one byte out (unless when Strongbox is used)
             for (int plaintextIndex = 0; plaintextIndex < plaintext.length; plaintextIndex++) {
                 byte[] output = update(new byte[] {plaintext[plaintextIndex]});
-                assertEquals("plaintext index: " + plaintextIndex, 1, output.length);
-                assertEquals("plaintext index: " + plaintextIndex,
-                        expectedCiphertext[plaintextIndex], output[0]);
+                if (!isStrongbox()) {
+                    assertTrue(output != null);
+                    assertEquals("plaintext index: " + plaintextIndex, 1, output.length);
+                }
+                if (output != null) {
+                    for (int i = 0; i < output.length; ++i) {
+                        assertEquals("ciphertext comparison position: " + comparingPosition,
+                                expectedCiphertext[comparingPosition], output[i]);
+                        comparingPosition += 1;
+                    }
+                }
             }
             byte[] finalOutput = doFinal();
             byte[] expectedFinalOutput;
-            if (isAuthenticatedCipher()) {
+            if (isAuthenticatedCipher() || (isStrongbox() && finalOutput.length != 0)) {
                 expectedFinalOutput =
-                        subarray(expectedCiphertext, plaintext.length, expectedCiphertext.length);
+                        subarray(expectedCiphertext, comparingPosition, expectedCiphertext.length);
             } else {
                 expectedFinalOutput = EmptyArray.BYTE;
             }
@@ -814,15 +824,28 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
             byte[] finalOutput = doFinal();
             assertEquals(expectedPlaintext, finalOutput);
         } else if (isStreamCipher()) {
-            // Unauthenticated stream cipher -- one byte in, one byte out
+            int comparingPosition = 0;
+            // Unauthenticated stream cipher -- one byte in, one byte out (unless when Strongbox is used)
             for (int ciphertextIndex = 0; ciphertextIndex < ciphertext.length; ciphertextIndex++) {
                 byte[] output = update(new byte[] {ciphertext[ciphertextIndex]});
-                assertEquals("ciphertext index: " + ciphertextIndex, 1, output.length);
-                assertEquals("ciphertext index: " + ciphertextIndex,
-                        expectedPlaintext[ciphertextIndex], output[0]);
+                if (!isStrongbox()) {
+                    assertTrue(output != null);
+                    assertEquals("ciphertext index: " + ciphertextIndex, 1, output.length);
+                }
+                if (output != null) {
+                    for (int i = 0; i < output.length; ++i) {
+                        assertEquals("plaintext comparison position: " + comparingPosition,
+                                expectedPlaintext[comparingPosition], output[i]);
+                        comparingPosition += 1;
+                    }
+                }
             }
             byte[] finalOutput = doFinal();
-            assertEquals(0, finalOutput.length);
+            int expectedPlainTextLength = 0;
+            if (isStrongbox()) {
+                expectedPlainTextLength = (expectedPlaintext.length - comparingPosition);
+            }
+            assertEquals(expectedPlainTextLength, finalOutput.length);
         } else {
             // Unauthenticated block cipher -- operates in full blocks only
 
@@ -1187,6 +1210,8 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
                 throw new AssertionFailedError("Unsupported opmode: " + opmode);
         }
 
+        boolean allowZeroLengthOutput = expectedOutput.length == 0;
+
         int inputEndIndexInBuffer = inputOffsetInBuffer + input.length;
         int outputEndIndexInBuffer = outputOffsetInBuffer + expectedOutput.length;
 
@@ -1195,15 +1220,15 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
         System.arraycopy(input, 0, buffer, inputOffsetInBuffer, input.length);
         createCipher();
         initKat(opmode);
-        String additionalInformation = "";
-        if (isStrongbox() && opmode == Cipher.ENCRYPT_MODE) {
-            additionalInformation = "May fail due to b/194134359";
-        }
-        assertEquals(additionalInformation, expectedOutput.length,
-                update(buffer, inputOffsetInBuffer, input.length,
-                        buffer, outputOffsetInBuffer));
-        assertEquals(expectedOutput,
-                subarray(buffer, outputOffsetInBuffer, outputEndIndexInBuffer));
+        int bytes = update(buffer, inputOffsetInBuffer, input.length,
+                buffer, outputOffsetInBuffer);
+        // We make little assumptions about the size of the output. But we make sure that at least
+        // one block was processed.
+        assertTrue(bytes >= blockSize || (allowZeroLengthOutput && bytes == 0));
+        // Check that all that was processed was as expected.
+        assertEquals(subarray(expectedOutput, 0, bytes),
+            subarray(buffer, outputOffsetInBuffer, outputOffsetInBuffer + bytes));
+
 
         if (outputOffsetInBuffer == 0) {
             // We can use the update variant which assumes that output offset is 0.
@@ -1211,10 +1236,10 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
             System.arraycopy(input, 0, buffer, inputOffsetInBuffer, input.length);
             createCipher();
             initKat(opmode);
-            assertEquals(expectedOutput.length,
-                    update(buffer, inputOffsetInBuffer, input.length, buffer));
-            assertEquals(expectedOutput,
-                    subarray(buffer, outputOffsetInBuffer, outputEndIndexInBuffer));
+            bytes = update(buffer, inputOffsetInBuffer, input.length, buffer);
+            assertTrue(bytes >= blockSize || (allowZeroLengthOutput && bytes == 0));
+            assertEquals(subarray(expectedOutput, 0, bytes),
+                    subarray(buffer, outputOffsetInBuffer, outputOffsetInBuffer + bytes));
         }
 
         // Test the update(ByteBuffer, ByteBuffer) variant
@@ -1225,9 +1250,10 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
                 ByteBuffer.wrap(buffer, outputOffsetInBuffer, expectedOutput.length);
         createCipher();
         initKat(opmode);
-        assertEquals(expectedOutput.length, update(inputBuffer, outputBuffer));
-        assertEquals(expectedOutput,
-                subarray(buffer, outputOffsetInBuffer, outputEndIndexInBuffer));
+        bytes = update(inputBuffer, outputBuffer);
+        assertTrue(bytes >= blockSize || (allowZeroLengthOutput && bytes == 0));
+        assertEquals(subarray(expectedOutput, 0, bytes),
+                subarray(buffer, outputOffsetInBuffer, outputOffsetInBuffer + bytes));
     }
 
     public void testDoFinalCopySafe() throws Exception {
@@ -1485,16 +1511,15 @@ abstract class BlockCipherTestBase extends AndroidTestCase {
                     0, outputLength);
             return;
         }
+        /*
+         * Strongbox implementations did not have the following restrictions.
+         */
+        if (isStrongbox()) return;
 
         if (isStreamCipher()) {
             if (outputLength != inputLength) {
-                if (isStrongbox()) {
-                    fail("Output of update (" + outputLength + ") not same size as input ("
-                                + inputLength + ") b/194123581");
-                } else {
-                    fail("Output of update (" + outputLength + ") not same size as input ("
-                            + inputLength + ")");
-                }
+                fail("Output of update (" + outputLength + ") not same size as input ("
+                        + inputLength + ")");
             }
         } else {
             if ((outputLength % getBlockSize()) != 0) {
